variables:
    TEST_IMAGE_NAME: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
    STAGING_IMAGE_NAME: ${CI_REGISTRY_IMAGE}:latest-staging
    PRODUCTION_IMAGE_NAME: ${CI_REGISTRY_IMAGE}:release
    STAGING_SOLR_IMAGE_NAME: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:solr-latest
    RELEASE_SOLR_IMAGE_NAME: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:solr-release
    DOCKER_FILE_PATH: .

stages:
    - lint
    - build
    - test
    - deploy

black:
  stage: lint
  image: python:3.8-slim
  tags:
    - dll-docker
  before_script:
    - pip install black
  script:
    - black --check .

test_python:
    stage: test
    image: ${TEST_IMAGE_NAME}
    services:
      - postgres:12-alpine
      - name: ${STAGING_SOLR_IMAGE_NAME}
        alias: solr

    before_script:
      - poetry install
    script:
      - coverage run --source=/code/dll/ -m pytest /code/dll/
      - coverage report
    tags:
        - dll-docker
    variables:
        POSTGRES_DB: "postgres"
        POSTGRES_USER: "postgres"
        POSTGRES_PASSWORD: ""
        POSTGRES_HOST_AUTH_METHOD: trust
        REDIS_HOSTNAME: "redis"
        DATABASE_USER: "postgres"
        DATABASE_NAME: "postgres"
        DATABASE_HOST: "postgres"
        DJANGO_DEBUG: "True"
        CELERY_TASK_ALWAYS_EAGER: "True"
        SOLR_HOSTNAME: "solr"
        EMAIL_HOST: "floki.rz.tuhh.de"
        EMAIL_PORT: "25"
        EMAIL_USE_TLS: "False"
        EMAIL_SENDER: "j.doe@example.com"
        CONTACT_EMAIL_BSB: "j.doe@example.com"
        CONTACT_EMAIL_DLL: "j.doe@example.com"
        META_SITE_PROTOCOL: https
        META_SITE_DOMAIN: staging.digitallearninglab.de
        DEFAULT_USER_EMAIL: digital.learning.lab@tuhh.de

register_staging_python_image:
  stage: deploy
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - echo "Reached deployment stage. Retagging staging-test image for automatic deployment via keel."
    - docker tag ${TEST_IMAGE_NAME} ${STAGING_IMAGE_NAME}
    - docker push ${STAGING_IMAGE_NAME}
  tags:
    - dll-shell
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop"
      when: always

build_python_image:
  stage: build
  before_script:
      - docker system prune -a -f
      - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
      - docker build --no-cache -t ${TEST_IMAGE_NAME} ${DOCKER_FILE_PATH}
      - docker push ${TEST_IMAGE_NAME}
  tags:
      - dll-shell

register_prod_python_image:
  stage: deploy
  before_script:
      - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
      - docker tag ${TEST_IMAGE_NAME} ${PRODUCTION_IMAGE_NAME}
      - docker push ${PRODUCTION_IMAGE_NAME}
  tags:
      - dll-shell
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
      when: manual

build_solr_image:
  stage: build
  before_script:
      - docker system prune -a -f
      - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
      - docker build --no-cache -t ${STAGING_SOLR_IMAGE_NAME} ${DOCKER_FILE_PATH} -f Dockerfile.solr
      - docker push ${STAGING_SOLR_IMAGE_NAME}
  tags:
      - dll-shell
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" || $CI_COMMIT_REF_NAME == "master"
      when: always

register_prod_solr_image:
  stage: deploy
  before_script:
      - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
      - docker tag ${STAGING_SOLR_IMAGE_NAME} ${RELEASE_SOLR_IMAGE_NAME}
      - docker push ${RELEASE_SOLR_IMAGE_NAME}
  tags:
      - dll-shell
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
      when: manual

update_deps:
    stage: lint
    image: renovate/renovate:latest
    variables:
      RENOVATE_PLATFORM: gitlab
      RENOVATE_ENDPOINT: https://collaborating.tuhh.de/api/v4
      RENOVATE_TOKEN: $GITLAB_ACCESS_TOKEN
      RENOVATE_REPOSITORIES: itbh/tnt/digital-learning-lab/codebasis_plattform
      RENOVATE_BASE_BRANCHES: develop
    rules:
      - if: $CI_PIPELINE_SOURCE == "schedule"
    script: renovate
